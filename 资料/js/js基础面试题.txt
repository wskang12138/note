1.跨域的原理和解决(什么是跨域，解决跨域的方案)

首先说什么是跨域？

浏览器有同源策略：浏览器的一种安全策略，协议，域名，端口号完全相同就是同源，只要有一处不一样就是不同源，不同源就不能发送ajax请求。如果请求就是跨域（请求）

解决跨域的方案：

（1）Jsonp

利用scirpt标签的src属性不受跨域的限制的特点，请求服务端的返回的数据；返回的数据中；就是一个函数的调用，并把数据作为参数传进来，在客户端，创建一个，返回数据中的函数，这样，返回的数据就能够调用成功，里面的参数就是我们要的数据，只支持get请求

（2）服务器端设置可跨域

在本地浏览器设置可跨域，我们可以使用谷歌跨域插件lantern，加载cors拓展程序
cors是一门技术，在本质上让ajax引擎允许跨域，get和post请求都支持


2.sessionStorage localStorage cookie的区别

（1）数据生命周期

cookie：生成时就会被指定一个maxAge值，这就是cookie的生存周期，在这个周期cookie有效，默认关闭浏览器失效。
sessionStorage：用于本地存储一个会话中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。
localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。

（2）存放数据大小

cookie：4k左右（因为每次http请求都会携带cookie）
sessionStorage：一般是5M或者更大
localStorage：一般是5M或者更大

（3）与服务端通信

cookie：每次请求都会携带在HTTP头中，如果使用cookie保存过多数据户带来性能问题
sessionStorage和localStorage：只有在请求中使用数据，不参与服务器通信


（4）易用性

cookie需要自己封装setCookie和getCookie
sessionStorage和localStorage：拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie



3.性能优化

为什么？
首先，由于JS是一种解释型语言，执行速度要比编译型语言慢得多。需要改进代码的整体性能。
 
how:
（1）注意作用域

随着作用域中的作用域数量的增加，访问当前作用域以外的变量的时间也在增加。所以，访问全局变量总是比访问局部变量要慢，因为需要遍历作用域链。只要能减少花费在作用域链上的时间，就能增加脚本的整体性能
（1-1）避免全局查找
（1-2）避免with语句（with会创建自已的作用域，因此会增加其中执行代码的作用域的长度）

（2）选择正确的方法

和其它语言一样，性能问题的一部分是和用于解决问题的算法或方法有关的，所以通过选择正确的方法也能起到优化作用

（2-1）避免不必要的属性查找
（2-2）循环是编程中最常见的结构，需要优化循环

（3）展开循环

当循环的次数确定时，消除循环并使用多次函数调用往往更快
当循环的次数不确定时，可以使用Duff装置来优化

（4）避免双重解释

当JS代码想解析JS代码时就会存在双重解释惩罚，当使用eval()函数或是Function构造函数以及使用setTimeout()传一个字符串时都会发生这种情况，总之，若要提高代码性能，尽可能避免出现需要按照JS解释的代码。

（5）优化DOM交互
在JS中，DOM无疑是最慢的一部分，DOM操作和交互要消耗大量时间，因为它们往往需要重新渲染整个页面或者某一个部分

（5-1）最小化现场更新
 
一旦你需要访问的DOM部分是已经显示的页面的一部分，那么你就是在进行一个现场更新。之所以叫现场更新，是因为需要立即对页面对用户的显示进行更新，每一个更改，不管是插入单个字符还是移除整个片段，都有一个性能惩罚，因为浏览器需要重新计算无数尺寸以进行更新。现场更新进行的越多，代码完成执行所花的时间也越长。
 
（5-2）多使用innerHTML
 
有两种在页面上创建DOM节点的方法：使用诸如createElement()和appendChild()之类的DOM方法，以及使用innerHTML。对于小的DOM更改，两者效率差不多，但对于大的DOM更改，innerHTML要比标准的DOM方法创建同样的DOM结构快得多。由于内部方法是编译好的而非解释执行，故执行的更快。


（6）定时器

如果针对的是不断运行的代码，不应该使用setTimeout，而应该是用setInterval，因为setTimeout每一次都会初始化一个定时器，而setInterval只会在开始的时候初始化一个定时器


4.js继承（es5继承）

js继承主要有三个，分别是原型链继承，借用构造函数继承，组合继承（伪经典继承）

（4-1）原型链继承

子构造函数.prototype = new 父构造函数()   //子类的原型继承父类的实例
function Father（）{
 this.name="Tom"
}
function child（）{
this.age=17
}

child.prototype = new Father（）

var son=new Child()//实例化子类
alert(son.name+son.age)


缺点：产生的所有的实例对象都具有相同的属性和方法，并且一个实例对象更改原型对象的属性或方法，其他实例对象也同样备改变了


（4-2）借用构造函数-----首字母必须大写

使用call和apply借用其他构造函数的成员, 可以解决给父构造函数传递参数的问题, 但是获取不到父构造函数原型上的成员，也不存在共享问题

// 创建父构造函数
function Person(name，sex){
  this.name = name;
}

// 创建子构造函数
 function Son(name){
  Person.call(this, name);//call 强制改变this指向，这个时候我们打印这个this，就会发现他的指向一斤改变了
 }

 var s1 = new Son('Li');
 s1.name(); // Li

（4-3）组合继承（伪经典继承）

借用构造函数 + 原型式继承
使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承


解决了原型链的缺点


// 创建父构造函数
function Person(name){
    this.name = name;
}
// 设置父构造函数的原型对象
Person.prototype.showName = function(){
    alert(name);
}
// 创建子构造函数
function Student(name，age){
    Person.call(this,name);//实例属性
    this.age=age;//原型的属性
}
// 设置继承
Student.prototype = new Person（）;
Student.prototype.show = function（）{
        alert（this.name+this.age）
}

var child1=new Child（“tom”,18）
child1.show//调用




5.原型，原型链

原型：在js中，每当定义一个函数数据类型时候，都会天生自带一个prototype属性，这个属性是一个指针，指向函数的原型对象，这个原型对象是用来给实例共享属性和方法的。每个实例内部都有一个指向原型对象的指针,这个对象就是函数的原型对象，简称函数的原型

原型链：原型对象和实例对象的层层递进关系每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含指向原型对象内部的指针。
我们让原型对象的实例（1）等于另一个原型对象（2）,
此时原型对象（2）将包含一个指向原型对象（1）的指针，再让原型对象（2）的实例等于原型对象（3），如此层层递进就构成了实例和原型的链条，这就是原型链的概念


在js中，我们创建一个构造函数A,浏览器就会在内存中创建一个对象B,每个函数都有一个属prototype指向这个对象，这个对象就是函数的原型对象，简称函数的原型

每个对象都有一个内部属性prototype,这个属性值可以为空或一个对象，这个对象又有自己的原型，这样形成一个链条，我们称之为原型链



6.闭包

（6-1）概念：闭包就是能够读取其他函数内部变量的函数（有权访问另一个函数作用域中的变量的函数，就是拿到本不该属于他的东西）

（6-2）闭包的（特性）优点：能被当做全局变量来使用，并且能保护变量不被全局污染

（6-3）闭包的三个特征：

函数嵌套函数
内部变量可以直接访问外部函数的内部变量或参数
变量不会被垃圾回收机制回收

（6-4）闭包的优点：
变量长期驻扎在内存中
避免全局变量的污染

（6-5）闭包的缺点:
常驻内存，增大内存的使用量，使用不当容易造成内存泄漏



7.h5和css3的新特性

h5新特性：

（1）h5 Web 存储
sessionStorage―会话级的数据存储，只能维持在当前会话范围内。当用户关闭浏览器窗口后，数据会被删除。
localStorage―持久化的本地存储。localStorage 对象存储的数据没有时间限制。除非主动删除否则数据永远不会过期

（2）画布     Canvas元素用于在网页上绘制图形

（3）h5语义化标签:

（3-1）<article>标记定义一篇文章
（3-2）<aside>定义页面的侧边栏内容。
（3-3）<command>定义命令按钮，比如单选按钮、复选框或按钮
（3-4）<details>用于描述文档或文档某个部分的细节
（3-5）<dialog>定义对话框，比如提示框
（3-6）<figure>规定独立的流内容（图像、图表、照片、代码等等）。
（3-7）<figcaption>定义 <figure> 元素的标题
（3-8）<footer>定义 section 或 document 的页脚。
（3-9）<header>定义了文档的头部区域
（3-10）<nav>定义导航链接的部分。

（4）h5新增了媒体交互标签     

 Audio(音频) 和 Video(视频)

（5）h5 表单元素

（5-1）<input>标签定义选项列表。
（5-2）<output> 标签定义不同类型的输出，比如脚本的输出
（5-3）placeholder    设置文本框的默认提示文字


c3新特性：

（1）CSS3 弹性盒模型-----是一种当页面需要适应不同的屏幕大小以及设备类型时确保元素拥有恰当的行为的布局方式

可以使用比如：
flex	设置弹性盒子的子元素如何分配空间
flex-wrap	设置弹性盒子的子元素超出父容器时是否换行。
align-content	设置行对齐
order	设置弹性盒子的子元素排列顺序。


（2）CSS3 多列布局

属性	描述
column-count	指定元素应该被分割的列数。
column-fill	指定如何填充列
column-rule-color	指定两列间边框的颜色
column-rule-style	指定两列间边框的样式
column-width	指定列的宽度


（3）CSS3 动画
属性	描述	CSS
animation	所有动画属性的简写属性	
animation-duration	规定动画完成一个周期所花费的秒或毫秒
animation-delay	规定动画何时开始。	3
animation-direction	规定动画是否在下一周期逆向地播放。默认是 "normal"


（4）CSS3 过渡

属性	描述	CSS
transition	简写属性，用于在一个属性中设置四个过渡属性。		
transition-duration	定义过渡效果花费的时间。默认是0 	
transition-delay	规定过渡效果何时开始。默认是 0。



（5）CSS3 文本效果

属性	描述	CSS
text-outline	规定文本的轮廓。	
text-overflow	规定当文本溢出包含元素时发生的事情。	
text-shadow	向文本添加阴影。	
text-wrap	规定文本的换行规则。	



（6）CSS3定义了两种类型的渐变（gradients）：

线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向
background: linear-gradient(direction, color-stop1, color-stop2, ...);

径向渐变（Radial Gradients）- 由它们的中心定义


（7）CSS3媒体查询   @media

（8）CSS3 边框  创建圆角边框，添加阴影框

（9）CSS3选择器

选择器	        示例说明CSS
*	   	选择所有元素

#id         选择所有id="firstname"的元素        
 
.class      选择所有class="xxx"的元素

:hover	    选择鼠标在链接上面时

:first-child  指定某元素是其父级的第一个子级的样式



8.事件冒泡，事件捕获


事件冒泡：事件从子元素向父元素传递

事件捕获：事件发生时，父元素向子元素传递

通过true和false来判定事件冒泡和事件捕获
如果是true就是事件冒泡
false就是事件捕获



9.解释下JavaScript中this是如何工作的

（1）this 永远指向函数运行时所在的对象，而不是函数创建时所在的对象
（2）匿名函数和不处于任何对象中的函数，This指向window
（3）call, apply指的This是谁就是谁。
（4）普通函数调用，函数被谁调用，This就指向谁


10.es6 promise 如何实现，底层原理是什么

Promise  诺言  是一种异步编程解决方案（解决回调地狱---多个函数嵌套问题）
从语法上来讲，Promise是一个对象，从它可以获取异步操作的消息。Promise对象的状态不受外部影响

promise的方法：
Promise.all()
Promise.race()
Promise.resolve()//成功
Promise.reject()//失败
Promise 规范中还规定了 Promise 中必须有 then 方法，这个方法也是实现异步的链式操作的基本

  
有三种状态：  
进行中padding  已成功resolve  已失败 reject

我们可以通过new  Promise(function(resolve,reject){})来创建一个promise
通过.then(成功函数,失败函数)promise.all  所有的异步操作都成功后，在去执行一个动作  例如 图片都加载完成后显示页面
promise.all:把多个promise实例当做一个promise实例，当所有的状态都完成之后。才会触发新的promise对象的then方法promise.race  谁先回来处理谁，先到先得










11.渐进增强，优雅降级

渐进增强：向上兼容版本较高的浏览器，针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进能达到更好的用户体验


优雅降级：向下兼容版本较低的浏览器，一开始就构建完整的功能，然后再针对低版本浏览器进行兼容

两者的区别：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的、能够起作用的版本开始，并不断扩充，以适应未来环境的需要。


渐进增强---写法不同
.transition{
  -webkit-transition: all .5s;
     -moz-transition: all .5s;
       -o-transition: all .5s;
          transition: all .5s;  
}

优雅降级---写法不同
.transition{ 
　　     transition: all .5s;
　　  -o-transition: all .5s;
  　-moz-transition: all .5s;
 -webkit-transition: all .5s;
}


when:什么时候用

页面布局的时候用到，使用一些css样式


where:应用场景
渐进增强:先完成了页面的基本布局，没有任何特效，那么加个小动画，加个文字阴影等，就是渐进增强了
1.CSS3 text-shadow 文字阴影属性
2.CSS3 box-shadow 盒子阴影属性
3.CSS3 boder-radius 圆角属性

优雅降级：
1.CSS3 线性渐变（linear-gradient）首先仅支持IE10(版本较高)
#grad {
    background: linear-gradient(red,yellow,blue);
}//版本较高的写法

再进行兼容其他浏览器
#grad {
  background: linear-gradient(to right, red , blue); /* 标准语法 */
  background: -moz-linear-gradient(right, red, blue); /* Firefox 3.6 to 15 */
  background: -o-linear-gradient(right, red, blue); /* Opera 11.1 to 12.0 */
  background: -webkit-linear-gradient(left, red , blue); /* Safari 5.1 to 6.0 */  
}



12.常见http状态码

（1）1XX系列：代表请求已被接受，需要继续处理。由于 HTTP/1.0 协议中没有定义任何 1xx 状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送 1xx 响应

（2）2XX系列：代表请求已成功被服务器接收、理解、并接受。

（2-1）200状态码：表示请求已成功


（2-2）201状态码：表示请求成功并且服务器创建了新的资源，且其 URI 已经随Location 头信息返回。假如需要的资源无法及时建立的话，应当返回 '202 Accepted'


（2-3）202状态码：服务器已接受请求，但尚未处理


（3）3XX系列：代表需要客户端采取进一步的操作才能完成请求，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的 Location 域中指明。

（3-1）301状态码：被请求的资源已永久移动到新位置。服务器返回此响应时，会自动将请求者转到新位置。

（3-2）302状态码：请求的资源临时从不同的URI响应请求，但请求者应继续使用原有位置来进行以后的请求

（3-3）304自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容


（4）4XX系列：表示请求错误。代表了客户端看起来可能发生了错误，妨碍了服务器的处理。

（4-1）401状态码：请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。

（4-2）403状态码：服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。

（4-3）404状态码：请求失败，请求所希望得到的资源未被在服务器上发现

 
（5）5xx系列：代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。

（5-1）500状态码：服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器的程序码出错时出现。

（5-2）503状态码：由于临时的服务器维护或者过载，服务器当前无法处理请求。通常，这个是暂时状态，一段时间会恢复



13.深拷贝 浅拷贝

Object.assign属于第一层数据,是深拷贝,第二层数据是浅拷贝
var obj={name:‘zhansan’，age:20,children：{name:‘erzi’,age:3}
var obj2={}
Object.assign(obi2,obj）
console.log(obj2)


浅拷贝：仅仅复制对象的引用，而不是对象本身；
深拷贝：把复制的对象所引用的全部对象都复制一遍。


对象的深拷贝:
什么是深拷贝？把对象A的所有属性复制到对象B中，不能直接写B=A这样是浅拷贝
如何实现？
（1）我们要用for in循环遍历对象的属性,如果这个属性是基本数据类型,就直接复制过去,如果是引用数据类型就用递归方法继续调用


（2）如果A对象的属性是基本数据类型,可以使用es6的assign方法,进行拷贝


（3）可以把对象A转化成字符串,复制给B,B在把自己转化成对象
var obj={name:‘zhansan’，age:20,children：{name:‘erzi’,age:3}
var obj2=JSON.parse(JSON.stringify(obj))
console.log(obj2)



